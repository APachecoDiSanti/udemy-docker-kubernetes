Dockerize BOTH apps - the Python and the Node app.

1) Create appropriate images for both apps (two separate images!).
HINT: Have a brief look at the app code to configure your images correctly!
> docker build .
> docker build .

2) Launch a container for each created image, making sure, 
that the app inside the container works correctly and is usable.
> docker run -it --rm 89abfcc09adc016d199f1414cfbd8c05a74076bd6a1c27a182e9cfbddbc25ef8
> docker run -d -p 80:3000 --rm 2aaaa75aeaceb8d565196d33ef8491d6ca3afeaa9101a79598473c9b1abeb6a5

3) Re-create both containers and assign names to both containers.
Use these names to stop and restart both containers.
> docker run -it --name pythonapp 89abfcc09adc016d199f1414cfbd8c05a74076bd6a1c27a182e9cfbddbc25ef8
> docker run -d -p 80:3000 --name nodeapp 2aaaa75aeaceb8d565196d33ef8491d6ca3afeaa9101a79598473c9b1abeb6a5

4) Clean up (remove) all stopped (and running) containers, 
clean up all created images.
> docker container prune
> docker image prune

5) Re-build the images - this time with names and tags assigned to them.
> docker build -t pythonapp:latest .
> docker build -t nodeapp:latest .

6) Run new containers based on the re-built images, ensuring that the containers
are removed automatically when stopped.
> docker run -it -d --rm --name pythonapp pythonapp
> docker run -d -p 80:3000 --rm --name nodeapp nodeapp
